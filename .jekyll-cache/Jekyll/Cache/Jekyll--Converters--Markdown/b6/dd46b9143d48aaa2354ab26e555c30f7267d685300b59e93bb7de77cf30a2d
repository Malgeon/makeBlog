I"a<h2 id="코틀린은-다중-패러다임-언어">코틀린은 다중 패러다임 언어</h2>
<ul>
  <li>함수형 프로그래밍(FP: Functional Programming)</li>
  <li>객체 지향 프로그래밍(OOP: Object-Oriented Programming)</li>
</ul>

<h2 id="함수형-프로그래밍">함수형 프로그래밍</h2>
<ul>
  <li>코드 간략, 테스트나 재사용성 증가</li>
  <li>람다식, 고차 함수를 사용해 구성</li>
  <li>순수 함수</li>
</ul>

<h2 id="순수-함수pure-function">순수 함수(pure function)</h2>

<ol>
  <li>부작용(side-effect)이 없는 함수
    <ul>
      <li>동일한 입력 인자에 대해서는 항상 같은 결과를 출력 혹은 반환 한다.</li>
      <li>값이 예측 가능해 결정적(deterministic)이다.</li>
    </ul>
  </li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre> <span class="nx">fun</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="nx">Int</span><span class="p">):</span> <span class="nx">Int</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="c1">//도일한 인자인 a, b를  입력 받아 항상 a + b를 출력(부작용이 없음)</span>
 <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>순수함수의 조건
    <ul>
      <li>같은 인자에 대하여 항상 같은 값을 반환</li>
      <li>함수 외부의 어떤 상태도 바꾸지 않는다.</li>
    </ul>
  </li>
</ol>

:ET