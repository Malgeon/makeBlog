I"q.<h1 id="문제설명">문제설명</h1>
<p>n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다. 1번 노드에서 가장 멀리 떨어진 노드의 갯수를 구하려고 합니다. 가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미합니다.</p>

<p>노드의 개수 n, 간선에 대한 정보가 담긴 2차원 배열 vertex가 매개변수로   주어질 때, 1번 노드로부터 가장 멀리 떨어진 노드가 몇 개인지를 return 하도록 solution 함수를 작성해주세요.</p>

<p>제한사항
    - 노드의 개수 n은 2 이상 20,000 이하입니다.
    - 간선은 양방향이며 총 1개 이상 50,000개 이하의 간선이 있습니다.
    - vertex 배열 각 행 [a, b]는 a번 노드와 b번 노드 사이에 간선이 있다는 의미입니다.</p>

<table>
  <thead>
    <tr>
      <th>Vertex</th>
      <th style="text-align: center">Edge</th>
      <th style="text-align: right">return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6</td>
      <td style="text-align: center">[[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]</td>
      <td style="text-align: right">3</td>
    </tr>
  </tbody>
</table>

<h1 id="풀이">풀이</h1>
<p>우선 V,E 를 그래프를 표현한다. 
 행렬과 리스트 둘다 가능하나, 여기선 리스트로 만든다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">edge</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">]];</span>
<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">null</span><span class="p">).</span><span class="nx">map</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">());</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">of</span> <span class="nx">edge</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>해당 그래프를 BFS 또는 DFS를 통해 순회를 할 수 있는데, 여기선 노드간 거리를 측정하므로 BFS를 이용한다.
 Queue를 이용해 순회를 하며 해당 거리를 추가로 입력해준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]];</span>  <span class="c1">//Node, Distance</span>
<span class="kd">const</span> <span class="nx">dist</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">//Node 별 Distance 값 저장.</span>

<span class="kd">function</span> <span class="nx">inputQueue</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">weight</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">arrLeng</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">arrLeng</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">shift</span><span class="p">();</span>
    <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">num</span><span class="p">,</span> <span class="nx">weight</span><span class="p">]);</span>

    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>그렇게 되면 Max 거리를 알수 있게 되며, max거리를 가진 값의 개수만 return해주면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="nx">inputQueue</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

  <span class="k">while</span><span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">shifted</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">dist</span><span class="p">[</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">dist</span><span class="p">[</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">&gt;</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
      <span class="nx">dist</span><span class="p">[</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">shifted</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

    <span class="nx">inputQueue</span><span class="p">(</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">dist</span><span class="p">[</span><span class="nx">shifted</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">dist</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">max</span> <span class="o">=</span> <span class="nx">dist</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
          <span class="nx">answer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">dist</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>해결 Point: 그래프 표현으로 전환 -&gt; BFS 순회하며 거리측정 -&gt; Max 거리 count</p>
:ET