I"zF<h3 id="익명-함수">익명 함수</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">fun</span> <span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span> <span class="nx">Int</span><span class="p">):</span> <span class="nx">Int</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="c1">// 함수의 이름이 생략되어 있다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">val</span> <span class="nx">add</span><span class="p">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
<span class="nx">val</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// 임시적으로 function이 필요할 경우 저런식으로 사용한다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">val</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">fun</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="nx">int</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="c1">// 아래의 람다식과 매우 흡사하다. 그러나 return, break, continue는 람다식에서 사용불가능 하지만 일반 익명 함수에서는 사용이 가능하다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">val</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="nx">Int</span> <span class="o">-&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="인라인-함수">인라인 함수</h3>
<p>함수가 호출되는 곳에 내용을 모두 복사
함수의 분기 없이 처리 -&gt; 성능 증가</p>

<p>그러나 인라인 되는 함수의 코드가 많아질수록 복사된 전체 코드량이 증가하게 되므로 오히려 성능이 줄어들게 된다. 성능 향상 측면에서 람다식 함수에 사용될 것을 권장하고 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nx">inline</span> <span class="nx">fun</span> <span class="nx">shortFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">out</span><span class="p">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Unit</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">out</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">shortFunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">a: $it</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>noinline
일부 람다식 함수를 인라인 되지 않게 하기 위함.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">inline</span> <span class="nx">fun</span> <span class="nx">sub</span><span class="p">(</span><span class="nx">out1</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="nx">Unit</span><span class="p">,</span> <span class="nx">noinline</span> <span class="nx">out2</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="nx">Unit</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>crossinline</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nx">inline</span> <span class="nx">fun</span> <span class="nx">shortFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">out</span><span class="p">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Unit</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">out</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Goodbye</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">shortFunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">a: $it</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="c1">// return에 의해 Goodbye가 실행되지 않는다.</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>crossinline을 사용하므로써 비지역반환을 금지하게 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nx">inline</span> <span class="nx">fun</span> <span class="nx">shortFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">crossinline</span> <span class="nx">out</span><span class="p">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Unit</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">out</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Goodbye</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">shortFunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">a: $it</span><span class="dl">"</span><span class="p">)</span>
        <span class="c1">//return 사용시 error</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="확장-함수extension-function">확장 함수(extension function)</h3>
<p>클래스의 멤버 함수를 외부에서 더 추가할 수 있다.
적절히 사용하면 유용하지만 남발하면 호환성이 떨어지게 된다.</p>

<p>fun 확장대상.함수명(매개변수, …): 반환값 {
    …
    return 값
}</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">source</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello World!</span><span class="dl">"</span>
    <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kotlin</span><span class="dl">"</span>
    <span class="nx">println</span><span class="p">(</span><span class="nx">source</span><span class="p">.</span><span class="nx">getLongString</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span>
<span class="p">}</span>

<span class="nx">fun</span> <span class="nb">String</span><span class="p">.</span><span class="nx">getLongString</span><span class="p">(</span><span class="nx">target</span><span class="p">:</span> <span class="nb">String</span><span class="p">):</span> <span class="nb">String</span> <span class="o">=</span> 
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">target</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">this</span> <span class="k">else</span> <span class="nx">target</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="중위-표현법infix-notation">중위 표현법(infix notation)</h3>
<p>클래스의 멤버 호출 시 사용하는 점(.)을 생략하고 함수 이름 뒤에 소괄호를 생략해 직관적인 이름을 사용할 수 있는 표현법</p>

<p>조건</p>
<ul>
  <li>멤버 메서드 또는 확장 함수여야 한다.</li>
  <li>하나의 매개변수를 가져야 한다.</li>
  <li>infix 키워드를 사용하여 정의한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 일반 표현법</span>
    <span class="c1">// val multi = 3.multiply(10)</span>
    
    <span class="c1">// 중위 표현법</span>
    <span class="nx">val</span> <span class="nx">multi</span> <span class="o">=</span> <span class="mi">3</span> <span class="nx">multiply</span> <span class="mi">10</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">multi: $multi</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">infix</span> <span class="nx">fun</span> <span class="nx">Int</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="nx">Int</span><span class="p">):</span> <span class="nx">Int</span> <span class="p">{</span> 
    <span class="k">return</span> <span class="k">this</span> <span class="o">*</span> <span class="nx">x</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="꼬리-재귀-함수tail-recursive-function">꼬리 재귀 함수(tail recursive function)</h3>
<p>스택에 계속 쌓이는 방식이 함수가 계속 씌워지는 꼬리를 무는 형태
코틀린 고유의 tailrec 키워드를 사용해 선언</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1">//일반 재귀</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="nx">val</span> <span class="nx">result</span><span class="p">:</span> <span class="nx">Long</span>

    <span class="nx">result</span> <span class="o">=</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Factorial: $number -&gt; $result</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">fun</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="nx">Int</span><span class="p">):</span> <span class="nx">Long</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">n</span><span class="p">.</span><span class="nx">toLong</span><span class="p">()</span> <span class="k">else</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">//꼬리 재귀</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">5</span>   
    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Factorial: $number -&gt; ${factorial(number)}</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">tailrec</span> <span class="nx">fun</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">run</span><span class="p">:</span> <span class="nx">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span> <span class="nx">Long</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">if</span><span class="p">(</span><span class="nx">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">run</span><span class="p">.</span><span class="nx">toLong</span><span class="p">()</span> <span class="k">else</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">run</span><span class="o">*</span><span class="nx">n</span><span class="p">)</span> <span class="c1">//값을 꼬리물며 들어가기 때문에 스택을 사용하지 않는다.</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET