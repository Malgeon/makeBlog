I"!D<h3 id="생성자">생성자</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>class 클래스명 constructor(필요한 매개변수들..) { // 주 생성자의 위치
    ...
    constructor(필요한 매개변수들..) { // 부 생성자의 위치
        // 프로퍼티의 초기화
    }

    [constructor(필요한 매개변수들..) { ... }] // 추가 부 생성자
    ...
}
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>주 성생자(Primary constructor)
클래스명과 함께 기술되며 보통의 경우 constructor 키우드를 생략할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Bird</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">val</span> <span class="nx">wing</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="kd">var</span> <span class="nx">beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/*var name: String = _name
    val wing: Int = _wing
    var beak: String = _beak*/</span>
    <span class="cm">/*constructor(_name: String, _wing: Int, _beak: String) {
        name = _name
        wing = _wing
        beak = _beak
    }*/</span>
    <span class="nx">init</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">-----------init start ------------</span><span class="dl">"</span><span class="p">)</span>
        <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">()</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">name: $name, wing: $wing, break: $break</span><span class="dl">"</span><span class="p">)</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">-----------init end   ------------</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fun</span> <span class="nx">fly</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fly</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">coco</span> <span class="o">=</span> <span class="nx">Bird</span><span class="p">(</span><span class="dl">"</span><span class="s2">coco</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">coco</span><span class="p">.</span><span class="nx">fly</span><span class="p">()</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="init-초기화-블록">init{} 초기화 블록</h3>
<p>객체가 생성될 때 자동으로 실행되는 block을 설정할수 있다. 해당 블록의 작업시간이 길어질수록 객체 생성 시간이 늘어나므로 간단한 코드를 사용한다.</p>

<ul>
  <li>부 생성지(Secondary Constructor)
클래스 본문에 기술되며 하나 잇아의 부 생성자를 정의할 수 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Bird</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span><span class="p">:</span> <span class="nb">String</span>
    <span class="nx">val</span> <span class="nx">wing</span><span class="p">:</span> <span class="nx">Int</span>
    <span class="kd">var</span> <span class="nx">beak</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">_name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">_wing</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">_beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">name</span> <span class="o">=</span> <span class="nx">_name</span>
        <span class="nx">wing</span> <span class="o">=</span> <span class="nx">_wing</span>
        <span class="nx">beak</span> <span class="o">=</span> <span class="nx">_beak</span>
    <span class="p">}</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">_name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">_beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">name</span> <span class="o">=</span> <span class="nx">_name</span>
        <span class="nx">wing</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="nx">beak</span> <span class="o">=</span> <span class="nx">_beak</span>
    <span class="p">}</span>
    <span class="nx">fun</span> <span class="nx">fly</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fly</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">coco</span> <span class="o">=</span> <span class="nx">Bird</span><span class="p">(</span><span class="dl">"</span><span class="s2">coco</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">val</span> <span class="nx">coco2</span> <span class="o">=</span> <span class="nx">Bird</span><span class="p">(</span><span class="dl">"</span><span class="s2">coco</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">short</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">coco</span><span class="p">.</span><span class="nx">fly</span><span class="p">()</span>

    <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">coco2: name: ${coco2.name}, wing: ${coco2.wing}, beak: ${coco2.beak}</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="상속">상속</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>open class 기반 클래스명 { // open으로 파생 가능 (다른 클래스가 상속 가능한 상태가 됨)
    ...
}
class 파생 클래스명 : 기반 클래스명() { // 기반 클래스로 부터 상속, 최종 클래스로 파생 불가 ( : 사이로 빈칸이 양쪽으로 존재해야 한다!!)
    ...
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>코틀린의 모든 클래스는 묵시적으로 Any로부터 상속</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="nx">open</span> <span class="kd">class</span> <span class="nx">Bird</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="kd">var</span> <span class="nx">wing</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="kd">var</span> <span class="nx">beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">fun</span> <span class="nx">fly</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fly</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Lark</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">wing</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">:</span> <span class="nx">Bird</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">wing</span><span class="p">,</span> <span class="nx">beak</span><span class="p">){</span>
    <span class="nx">fun</span> <span class="nx">singHitone</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">sing Hitone</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Parrot</span> <span class="p">:</span> <span class="nx">Bird</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">language</span><span class="p">:</span> <span class="nb">String</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">wing</span><span class="p">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">beak</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">language</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">:</span> <span class="k">super</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">wing</span><span class="p">,</span> <span class="nx">beak</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">language</span>
    <span class="p">}</span>
    <span class="nx">fun</span> <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Speak: $language</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">fun</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">lark</span> <span class="o">=</span> <span class="nx">Lark</span><span class="p">(</span><span class="dl">"</span><span class="s2">myLark</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">short</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">val</span> <span class="nx">parrot</span> <span class="o">=</span> <span class="nx">Parrot</span><span class="p">(</span><span class="dl">"</span><span class="s2">myParrot</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="dl">"</span><span class="s2">long</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="다형성polymorphism">다형성(polymorphism)</h3>
<p>같은 이름을 사용하지만 구현 내용이 다르거나 매개변수가 달라서 하나의 이름으로 다양한 기능을 수행할 수 있는 개념</p>

<p>Static Polymorphism</p>
<ul>
  <li>컴파일 타임에 결정되는 다형성</li>
  <li>단순하게 보면 메서드 overloding을 사용할 때
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>fun example(a: Int)
fun example(a: Int, b: Int)
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>Dynamic Polymorphism</p>
<ul>
  <li>런타임 다형성</li>
  <li>동적으로 구성되는 overrideing된 메서드를 사용할 때
```
open class Parent (name: Int) {
  open fun example()
}
class Child1(name: Int) : Parent(name) {
  override fun example()
}
class Child2(name: Int) : Parent(name) {
  override fun example()
}</li>
</ul>

<p>var child1 = Child1(1)
var child2 = Child1(1)</p>

<p>child1.example()
child2.example()</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</pre></td><td class="rouge-code"><pre>

overriding
- 기능을 완전히 다르게 바꿔 재설계
- 누르다 -&gt; 행위 -&gt; push()
- push()는 '확인' 혹은 '취소' 용도로 서로 다른 기능을 수행 할 수 있음

overloading
- 기능은 같지만 인자를 다르게 하여 여러 경우를 처리
- 출력한다 -&gt; 행위 -&gt; print()
- print(123), print("Hello") 인자는 다르지만 출력의 기능은 동일함



```javascript
open class Bird(var name: String, var wing: Int, var beak: String) {
    open fun fly () {
        println("Fly")
    }
}

class Lark(name: String, wing: Int, beak: String) : Bird(name, wing, beak){
    fun singHitone() {
        println("sing Hitone")
    }

    override fun fly () {
        println("Quick Fly")
    }
}

class Parrot : Bird {
    var language: String
    constructor(name: String, wing: Int, beak: String, language: String) : super(name, wing, beak) {
        this.language = language
    }
    fun speak() {
        println("Speak: $language")
    }

    override fun fly () {
        println("Slow Fly")
    }
}

fun main() {
    var lark = Lark("myLark", 2, "short")
    var parrot = Parrot("myParrot", 2, "long", "English")

    lark.fly() // Quick Fly
    lark.singHitone()

    parrot.fly() // Slow Fly
    parrot.speak()

    var lark: Bird = Lark("myLark", 2, "short")
    var parrot: Bird = Parrot("myParrot", 2, "long", "English")

    lark.fly() // 동일하게 Quick Fly
    // lark.singHitone() error

    parrot.fly() // 동일하게 Slow Fly
    // parrot.speak() error
}
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nx">open</span> <span class="kd">class</span> <span class="nx">Lark</span><span class="p">()</span> <span class="p">:</span> <span class="nx">Bird</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// open! 상위클래스 이다. </span>
    <span class="nx">final</span> <span class="nx">override</span> <span class="nx">fun</span> <span class="nx">sing</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 하위 클래스에서 override 금지</span>
        <span class="cm">/* 구현부를 새롭게 재정의 */</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET