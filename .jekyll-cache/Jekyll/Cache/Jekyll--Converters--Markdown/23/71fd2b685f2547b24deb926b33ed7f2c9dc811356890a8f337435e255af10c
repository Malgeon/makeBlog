I":<div class="card h-100 my-u-padding"><div class="insertcover"><a target="_blank" class="text-dark" href="https://programmers.co.kr/learn/courses/30/lessons/64063"><div class=""><img class="inserturl" src="/assets/images/study/programmers.png" alt="programmers.co.kr" /></div><div class="insert-img-body"><h4 class="insert-img-title">해시 : 호텔 방 배정</h4><p class="insert-img-description">programmers.co.kr</p></div></a></div></div>

<p>해시 충돌 문제 처리를 얼마나 효율적으로 할 수 있도록 만드는 문제이다.
문제가 BFS나 이분탐색과 같은 전형적인 문제가 아니었기 때문에 생각보다 많이 어려웠다.
그래서 우선적으로 완전 탐색으로 문제를 풀고, 해당 풀이를 뼈대로 더 효율적으로 할 수 있는 방법을 찾아보았다.</p>

<ul>
  <li>완전 탐색 방법 
  당연히 정확도는 100%, 효율성은 14%(7개중 1개 통과)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">fun</span> <span class="nf">solution</span><span class="o">(</span><span class="nl">k:</span> <span class="nc">Long</span><span class="o">,</span> <span class="nl">room_number:</span> <span class="nc">LongArray</span><span class="o">):</span> <span class="nc">LongArray</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">arrayListOf</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;()</span>
        <span class="n">val</span> <span class="n">used</span> <span class="o">=</span> <span class="nc">Array</span><span class="o">(</span><span class="n">k</span><span class="o">.</span><span class="na">toInt</span><span class="o">()+</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="kc">false</span> <span class="o">}</span>
        <span class="n">fun</span> <span class="nf">findRoom</span><span class="o">(</span><span class="nl">idx:</span> <span class="nc">Long</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">var</span> <span class="n">intIdx</span> <span class="o">=</span> <span class="n">idx</span><span class="o">.</span><span class="na">toInt</span><span class="o">()</span>
            <span class="k">if</span><span class="o">(</span><span class="n">intIdx</span> <span class="o">===</span> <span class="n">used</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="k">return</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">used</span><span class="o">[</span><span class="n">intIdx</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">used</span><span class="o">[</span><span class="n">intIdx</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span>
                <span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">idx</span><span class="o">)</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="nf">findRoom</span><span class="o">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
        <span class="o">}</span>
        <span class="n">room_number</span><span class="o">.</span><span class="na">forEach</span> <span class="o">{</span>
            <span class="n">findRoom</span><span class="o">(</span><span class="n">it</span><span class="o">)</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">.</span><span class="na">toLongArray</span><span class="o">()</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">fun</span> <span class="nf">solution</span><span class="o">(</span><span class="nl">k:</span> <span class="nc">Long</span><span class="o">,</span> <span class="nl">room_number:</span> <span class="nc">LongArray</span><span class="o">):</span> <span class="nc">LongArray</span> <span class="o">{</span>
        <span class="n">val</span> <span class="n">used</span> <span class="o">=</span> <span class="n">mutableMapOf</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;()</span>
        <span class="k">return</span> <span class="n">room_number</span><span class="o">.</span><span class="na">map</span> <span class="o">{</span> <span class="n">findRoom</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="n">used</span><span class="o">)</span> <span class="o">}.</span><span class="na">toLongArray</span><span class="o">()</span>
    <span class="o">}</span>

    <span class="n">fun</span> <span class="nf">findRoom</span><span class="o">(</span><span class="nl">room:</span> <span class="nc">Long</span><span class="o">,</span> <span class="nl">used:</span> <span class="nc">MutableMap</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;):</span> <span class="nc">Long</span> <span class="o">{</span>
        <span class="n">used</span><span class="o">[</span><span class="n">room</span><span class="o">]?.</span><span class="na">let</span> <span class="o">{</span>
            <span class="kt">var</span> <span class="n">next</span> <span class="o">=</span> <span class="n">findRoom</span><span class="o">(</span><span class="n">it</span><span class="o">,</span> <span class="n">used</span><span class="o">)</span>
            <span class="n">used</span><span class="o">[</span><span class="n">room</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">next</span>
        <span class="o">}</span> <span class="o">?:</span> <span class="n">run</span> <span class="o">{</span>
            <span class="n">used</span><span class="o">[</span><span class="n">room</span><span class="o">]</span> <span class="o">=</span> <span class="n">room</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="n">room</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET