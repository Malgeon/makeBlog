I",H<h3 id="코루틴-문맥">코루틴 문맥</h3>

<p>Coroutine Context</p>
<ul>
  <li>코루틴을 실행하기 위한 다양한 설정값을 가진 관리 정보
    <ul>
      <li>코루틴 이름, 디스패처, 작업 상세사항, 예외 핸들러 등</li>
    </ul>
  </li>
  <li>디스패처는 코루틴 문맥을 보고 어떤 스레드에서 실행되고 있는지 식별이 가능해진다.</li>
  <li>코루틴 문맥은 + 연산을 통해 조합될 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">val</span> <span class="n">comCoroutineContext</span> <span class="o">=</span> <span class="n">someJob</span> <span class="o">+</span> <span class="nc">Dispatchers</span><span class="o">.</span><span class="na">IO</span> <span class="o">+</span> <span class="n">someCoroutineName</span> <span class="o">+</span> <span class="n">someExceptionHandler</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>관련 문맥</p>

<p>CoroutineName</p>
<ul>
  <li>코루틴에 이름을 주며 디버깅을 위해서 사용된다
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">val</span> <span class="n">someCoroutineName</span> <span class="o">=</span> <span class="nc">CoroutineName</span><span class="o">(</span><span class="s">"someCoroutineName"</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>Job</p>
<ul>
  <li>작업 객체를 지정할 수 있으며 취소가능 여부에 따라 SupervisorJob() 사용
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">val</span> <span class="n">parentJob</span> <span class="o">=</span> <span class="nc">SupervisorJob</span><span class="o">()</span> <span class="c1">// or Job()</span>
<span class="n">val</span> <span class="n">someJob</span> <span class="o">=</span> <span class="nc">Job</span><span class="o">(</span><span class="n">parentJob</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>CoroutineDispatcher</p>
<ul>
  <li>dispatchers.Default, …IO, 등을 지정할 수 있으며 필요에 따라 스레드풀 생성 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">val</span> <span class="nc">MyPool</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThredPool</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">asCoroutineDispatcher</span><span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>CoroutineExceptionHandler</p>
<ul>
  <li>코루틴 문맥을 위한 예외처리를 담당하며 코루틴에서 예외가 던져지면 처리한다.</li>
  <li>예외가 발생한 코루틴은 상위 코루틴에 전달되어 처리될 수 있다.
    <ul>
      <li>스코프를 가지는 경우 예외 에러를 잡아서 처리할 수 있다.</li>
    </ul>
  </li>
  <li>만일 예외처리가 자식에만 있고 부모에 없는 경우 부모에도 예외가 전달되므로 주의
    <ul>
      <li>이 경우 앱이 깨지게(crash)됨</li>
    </ul>
  </li>
  <li>예외가 다중으로 발생하면 최초 하나만 처리하고 나머지는 무시됨</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">// 예외 선언</span>
<span class="n">val</span> <span class="n">someExceptionHandler</span> <span class="o">=</span> <span class="nc">CoroutineExceptionHandler</span> <span class="o">{</span> <span class="n">coroutineContext</span><span class="o">,</span> <span class="n">throwable</span> <span class="o">-&gt;</span> 
    <span class="n">val</span> <span class="n">coroutineName</span> <span class="o">=</span> <span class="n">coroutineContext</span><span class="o">[</span><span class="nc">CoroutineName</span><span class="o">]?.</span><span class="na">name</span> <span class="o">?:</span> <span class="s">"default coroutine name"</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"Error in $coroutineName: ${throwable.localizedMessage}"</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="코루틴의-스코프">코루틴의 스코프</h3>

<p>GlobalScope</p>
<ul>
  <li>독립형(Standalone)코루틴을 구성, 생명주기는 프로그램 전체(top-level)에 해당하는 범위를 가지며 main의 생명 주기가 끝나면 같이 종료됨</li>
  <li>Dispatchers.Unconfined와 함께 작업이 서로 무관한 전역 범위 실행</li>
  <li>보통 GlobalScope 상에서는 launch나 async 사용이 권장되지 않음</li>
</ul>

<p>CoroutineScope</p>
<ul>
  <li>특정 목적의 디스패처를 지정한 범위를 블록으로 구성할 수 있다.</li>
  <li>모든 코루틴 빌더는 CoroutineScope의 인스턴스를 갖는다.</li>
  <li>launch {…}와 같이 인자가 없는 경우에는 CoroutineScope에서 상위의 문맥이 상속되어 결정 (기본값)</li>
  <li>launch(Dispatchers.옵션인자) {…}와 같이 디스패처의 스케쥴러를 지정가능
    <ul>
      <li>Dispatchers.Default는 GlobalScope에서 실행되는 문맥과 동일하게 사용</li>
    </ul>
  </li>
</ul>

<p>코루틴 스코프 사용 예시</p>

<p>GlobalScope</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">//GlobalScope</span>
<span class="n">val</span> <span class="n">scope1</span> <span class="o">=</span> <span class="nc">GlobalScope</span>
<span class="c1">// 권장하지 않는 사항</span>
<span class="n">scope1</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span> 
<span class="n">scope1</span><span class="o">.</span><span class="na">async</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">//GlobalScope</span>
<span class="nc">GlobalScope</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="n">val</span> <span class="n">job1</span> <span class="o">=</span> <span class="nc">GlobalScope</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span> <span class="c1">// Job 객체 -&gt; Job.join()으로 기다림</span>
<span class="n">val</span> <span class="n">job2</span> <span class="o">=</span> <span class="nc">GlobalScope</span><span class="o">.</span><span class="na">async</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span> <span class="c1">// Deferred 객체 -&gt; Deferred.await()으로 기다림(결과 반환)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>CoroutineScope</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">//CoroutineScope</span>
<span class="n">val</span> <span class="n">scope2</span> <span class="o">=</span> <span class="nc">CoroutineScope</span><span class="o">(</span><span class="nc">Dispatcher</span><span class="o">.</span><span class="na">Default</span><span class="o">)</span>
<span class="n">val</span> <span class="n">routine1</span> <span class="o">=</span> <span class="n">scope2</span><span class="o">.</span><span class="na">launch</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="n">val</span> <span class="n">routine2</span> <span class="o">=</span> <span class="n">scope2</span><span class="o">.</span><span class="na">async</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1">//CoroutineScope</span>
<span class="n">launch</span><span class="o">(</span><span class="nc">Dispatcher</span><span class="o">.</span><span class="na">Default</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span> 
<span class="n">async</span><span class="o">(</span><span class="nc">Dispatcher</span><span class="o">.</span><span class="na">Default</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>practice</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">kotlinx.coroutines.*</span>

<span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">=</span> <span class="n">runBlocking</span> <span class="o">{</span> <span class="c1">// Main이 runBlocking 스코프가 된다. 일종의 하나의 코루틴 스코프 </span>

    <span class="n">launch</span> <span class="o">{</span> <span class="c1">// 단순히 launch의 인자를 사용하지 않음(생략함)으로써 상위의 문맥이 상속되게 한다.</span>
        <span class="n">delay</span><span class="o">(</span> <span class="mi">200L</span> <span class="o">)</span>
        <span class="n">println</span><span class="o">(</span><span class="s">"Task from runBlocking)
    }

    coroutineScope {
        launch {
            delay( 200L )
            println("</span><span class="nc">Task</span> <span class="n">frm</span> <span class="n">nested</span> <span class="n">launch</span><span class="s">")
        }
        delay( 200L )
        println("</span><span class="nc">Task</span> <span class="n">from</span> <span class="n">coroutineScope</span><span class="s">")
    }

    println("</span><span class="n">end</span> <span class="n">of</span> <span class="n">runBlocking</span><span class="err">"</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Task from coroutineScope
Task from runBlocking
Task from nested launch
end of runBlocking
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">kotlinx.coroutines.*</span>

<span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">=</span> <span class="n">runBlocking</span> <span class="o">{</span> 

    <span class="n">launch</span> <span class="o">{</span> 
        <span class="n">delay</span><span class="o">(</span> <span class="mi">1200L</span> <span class="o">)</span> <span class="c1">// 시간을 더 줘서 나중에 출력하도록 한다.</span>
        <span class="n">println</span><span class="o">(</span><span class="s">"Task from runBlocking)
    }

    coroutineScope {
        launch {
            delay( 200L )
            println("</span><span class="nc">Task</span> <span class="n">frm</span> <span class="n">nested</span> <span class="n">launch</span><span class="s">")
        }
        delay( 200L )
        println("</span><span class="nc">Task</span> <span class="n">from</span> <span class="n">coroutineScope</span><span class="s">")
    }

    println("</span><span class="n">end</span> <span class="n">of</span> <span class="n">runBlocking</span><span class="err">"</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Task from coroutineScope
Task from nested launch
end of runBlocking
Task from runBlocking 
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">kotlinx.coroutines.*</span>

<span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">=</span> <span class="n">runBlocking</span> <span class="o">{</span> 

    <span class="n">launch</span> <span class="o">{</span> 
        <span class="n">delay</span><span class="o">(</span> <span class="mi">1200L</span> <span class="o">)</span> 
        <span class="n">println</span><span class="o">(</span><span class="s">"Task from runBlocking)
    }

    coroutineScope {
        launch {
            delay( 1500L ) /* 해당 시간을 늘려주면 coroutineScope의 시간 전체가 증가하므로
                            runBlocking의 launch가 실행될 여유가 생긴다.*/
            println("</span><span class="nc">Task</span> <span class="n">frm</span> <span class="n">nested</span> <span class="n">launch</span><span class="s">")
        }
        delay( 200L )
        println("</span><span class="nc">Task</span> <span class="n">from</span> <span class="n">coroutineScope</span><span class="s">")
    }

    println("</span><span class="n">end</span> <span class="n">of</span> <span class="n">runBlocking</span><span class="err">"</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Task from coroutineScope
Task from runBlocking
Task from nested launch
end of runBlocking
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">kotlinx.coroutines.*</span>

<span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">=</span> <span class="n">runBlocking</span><span class="o">(</span><span class="nc">Dispatchers</span><span class="o">.</span><span class="na">Default</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 필요에 따라 인자가 주어질 수 있다.</span>

    <span class="n">launch</span><span class="o">(</span><span class="nc">Dispatchers</span><span class="o">.</span><span class="na">IO</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// launch 또한 필요에 따라 인자가 주어질 수 있다.</span>
        <span class="n">delay</span><span class="o">(</span> <span class="mi">1200L</span> <span class="o">)</span> 
        <span class="n">println</span><span class="o">(</span><span class="s">"Task from runBlocking)
    }

    coroutineScope { // 인자가 주어질 수 없다!
        launch {
            delay( 1500L )
            println("</span><span class="nc">Task</span> <span class="n">frm</span> <span class="n">nested</span> <span class="n">launch</span><span class="s">")
        }
        delay( 200L )
        println("</span><span class="nc">Task</span> <span class="n">from</span> <span class="n">coroutineScope</span><span class="s">")
    }

    println("</span><span class="n">end</span> <span class="n">of</span> <span class="n">runBlocking</span><span class="err">"</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Task from coroutineScope
Task from runBlocking
Task from nested launch
end of runBlocking
</pre></td></tr></tbody></table></code></pre></div></div>
:ET