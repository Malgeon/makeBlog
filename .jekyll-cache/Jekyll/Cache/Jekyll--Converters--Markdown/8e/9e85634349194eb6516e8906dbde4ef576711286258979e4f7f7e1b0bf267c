I"0<div class="card h-100 my-u-padding"><div class="insertcover"><a target="_blank" class="text-dark" href="https://programmers.co.kr/learn/courses/30/lessons/72413"><div class=""><img class="inserturl" src="/assets/images/study/programmers.png" alt="programmers.co.kr" /></div><div class="insert-img-body"><h4 class="insert-img-title">2021 KAKAO BLIND RECRUITMENT : 합승 택시 요금</h4><p class="insert-img-description">programmers.co.kr</p></div></a></div></div>

<p>Dijkstra 또는 Floyd-Warshal 알고리즘을 알고 있다면 금방 풀수 있는 문제.</p>

<p>정답률 : 정확성 9.60%, 효율성 7.45%</p>

<p>그럼에도 정답률이 낮은 요인은 3가지로 생각된다.</p>

<ol>
  <li>앞선 3 문제를 풀고난 후 주어진 적은 시간</li>
  <li>위와 같은 알고리즘을 모르거나 이해하는 수준의 지식</li>
  <li>Dijkstra를 list로 풀 경우 정확성만 답을 맞출수 있게 된다. (효율성이 조금 낮은 요인)</li>
</ol>

<p>우선 Dijkstra로 풀어보았고 나중에 Floyd-Warsha를 업데이트 해보려 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">fun</span> <span class="nf">solution</span><span class="o">(</span><span class="nl">n:</span> <span class="nc">Int</span><span class="o">,</span> <span class="nl">s:</span> <span class="nc">Int</span><span class="o">,</span> <span class="nl">a:</span> <span class="nc">Int</span><span class="o">,</span> <span class="nl">b:</span> <span class="nc">Int</span><span class="o">,</span> <span class="nl">fares:</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">IntArray</span><span class="o">&gt;)</span> 
    <span class="o">=</span> <span class="nc">DijkstraClass</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">fares</span><span class="o">).</span><span class="na">solve</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">DijkstraClass</span> <span class="nf">constructor</span><span class="o">(</span><span class="kd">private</span> <span class="n">val</span> <span class="nl">n:</span> <span class="nc">Int</span><span class="o">,</span> <span class="kd">private</span> <span class="n">val</span> <span class="nl">fares:</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">IntArray</span><span class="o">&gt;)</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">var</span> <span class="n">graph</span> <span class="o">=</span> <span class="nc">Array</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="nc">IntArray</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="mi">1000000</span> <span class="o">}</span> <span class="o">}</span>
    <span class="kd">private</span> <span class="n">fun</span> <span class="nf">makeGraph</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">forEachIndexed</span> <span class="o">{</span> <span class="n">i</span><span class="o">,</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="n">v</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">fare</span> <span class="n">in</span> <span class="n">fares</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">[</span><span class="n">fare</span><span class="o">[</span><span class="mi">0</span><span class="o">]][</span><span class="n">fare</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="n">fare</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
            <span class="n">graph</span><span class="o">[</span><span class="n">fare</span><span class="o">[</span><span class="mi">1</span><span class="o">]][</span><span class="n">fare</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">=</span> <span class="n">fare</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">init</span> <span class="o">{</span>
        <span class="n">makeGraph</span><span class="o">()</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">fun</span> <span class="nf">dijkstra</span><span class="o">(</span><span class="nl">start:</span> <span class="nc">Int</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="nl">minDistance:</span> <span class="nc">Int</span>
        <span class="kt">var</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">start</span>
        <span class="kt">var</span> <span class="n">visited</span> <span class="o">=</span> <span class="nc">MutableList</span><span class="o">(</span><span class="n">graph</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span> <span class="mi">0</span> <span class="o">}</span>

        <span class="n">visited</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">visited</span><span class="o">.</span><span class="na">any</span> <span class="o">{</span> <span class="n">it</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">})</span> <span class="o">{</span>
            <span class="n">minDistance</span> <span class="o">=</span> <span class="nc">Int</span><span class="o">.</span><span class="na">MAX_VALUE</span>
            <span class="nf">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">1</span> <span class="n">until</span> <span class="n">graph</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">minDistance</span> <span class="o">&gt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">start</span><span class="o">][</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                        <span class="n">minDistance</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">start</span><span class="o">][</span><span class="n">i</span><span class="o">]</span>
                        <span class="n">cur</span> <span class="o">=</span> <span class="n">i</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">visited</span><span class="o">[</span><span class="n">cur</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">1</span> <span class="n">until</span> <span class="n">graph</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="n">in</span> <span class="mi">1</span> <span class="n">until</span> <span class="n">graph</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">cur</span><span class="o">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
                        <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">cur</span><span class="o">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">j</span><span class="o">]</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">fun</span> <span class="nf">solve</span><span class="o">(</span><span class="nl">s:</span><span class="nc">Int</span><span class="o">,</span> <span class="nl">a:</span> <span class="nc">Int</span><span class="o">,</span> <span class="nl">b:</span><span class="nc">Int</span><span class="o">):</span> <span class="nc">Int</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">minDistance</span> <span class="o">=</span> <span class="nc">Int</span><span class="o">.</span><span class="na">MAX_VALUE</span>
        <span class="nf">dijkstra</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="n">in</span> <span class="mi">1</span><span class="o">..</span><span class="na">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">var</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">s</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">a</span><span class="o">]</span> <span class="o">+</span> <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">b</span><span class="o">]</span>
            <span class="nf">if</span> <span class="o">(</span><span class="n">minDistance</span> <span class="o">&gt;</span> <span class="n">distance</span><span class="o">)</span> <span class="n">minDistance</span> <span class="o">=</span> <span class="n">distance</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">minDistance</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET