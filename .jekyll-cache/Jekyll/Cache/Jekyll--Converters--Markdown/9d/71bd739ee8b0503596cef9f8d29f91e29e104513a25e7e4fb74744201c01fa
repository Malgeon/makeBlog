I"$<p>category:</p>

<p>url: https://programmers.co.kr/learn/courses/30/lessons/49993</p>

<h1 id="문제풀이">문제풀이</h1>
<p>주어진 조건에 맞춰 구현을 할수 있는지를 묻는 문제이다.
  문자열을 다루는 문제라고도 할수 있다.</p>

<p>문제 해결의 방향을 입력에서 오는 문자열을 하나씩 빼면서 검사하도록 잡았는데, 처음 문제를 인식할 때 스킬은 입력한 스킬이며 해당 입력 스킬을 스킬트리 내에서 가능한 개수를 파악하는 것으로 이해했었다. 첫단추부터 잘못 꿰었어서 문제 해결하는 데 시간이 꽤 오래 걸렸다.</p>

<p>또한, 하나씩 빼면서 하는 검사다 보니 반복조건을 문자열이 비었을 경우로 생각을 해야 했다. 그렇게 되면 마지막에 가지게 되는 문자열은 검사를 해보지 못하게 된다. 그래서 마지막에 추가 검사를 해줌으로 해결하였다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">enableSkill</span><span class="p">(</span><span class="nx">skill</span><span class="p">,</span> <span class="nx">skill_tree</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">compare</span> <span class="o">=</span> <span class="nx">skill</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">forUse</span> <span class="o">=</span> <span class="nx">skill_tree</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
    
    <span class="kd">let</span> <span class="nx">tree</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">forUse</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">compare</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">compare</span> <span class="o">=</span> <span class="nx">compare</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="k">while</span><span class="p">(</span><span class="nx">forUse</span> <span class="o">!=</span> <span class="dl">''</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">compare</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">tree</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">target</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="nx">forUse</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
            <span class="nx">tree</span> <span class="o">=</span> <span class="nx">compare</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> 
            <span class="nx">compare</span> <span class="o">=</span> <span class="nx">compare</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">target</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="nx">forUse</span> <span class="o">=</span> <span class="nx">forUse</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">compare</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>for문을 사용하여 더 깔끔하게 코드 작성.
```javascript
function solution(skill, skill_trees) {
 var answer = 0;
 skill_trees.forEach( i =&gt; {
     if(enableSkill(skill, i)) {
         console.log(i);
         answer++;
     }  <br />
 })
 return answer;
}</li>
</ul>

<p>function enableSkill(skill, skill_tree) {
    let compare = skill.slice();
    let forUse = skill_tree.slice();
    let tree = compare[0];
    compare = compare.substring(1);</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>for(let i=0, len=forUse.length; i&lt;len; i++) {
    if(compare.includes(forUse[i])) {
        return false;
    }
    else if(tree === forUse[i]) {
        tree = compare[0];
        compare = compare.substring(1);
    }
}

return true; } ``` # 다른 풀이   내가 생각한 방법은, false 조건을 만들어서 구현했다. 그런데 아래 풀이는 true 조건을 만들고 구현한 방법이다.
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">skill</span><span class="p">,</span> <span class="nx">skill_trees</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">isCorrect</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">skill</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">skill</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="k">continue</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">test</span><span class="p">.</span><span class="nx">shift</span><span class="p">())</span> <span class="k">continue</span><span class="p">;</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>    
    <span class="k">return</span> <span class="nx">skill_trees</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">isCorrect</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET