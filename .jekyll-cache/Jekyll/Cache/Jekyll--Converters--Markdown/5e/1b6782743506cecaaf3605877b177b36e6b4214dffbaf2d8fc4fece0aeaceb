I"P?<h3 id="bfs와-dfs">BFS와 DFS</h3>

<p><a href="../study_Programming_Graph">그래프</a>를 가지고 BFS와 DFS를 통해 전체 노드를 순환해보자.</p>

<p>편의상 그래프 중 무방향 그래프를 대상으로 하고자 한다.</p>

<div class="card h-100 my-u-padding"><div class="insertcover"><div class=""><img class="inserturl" src="/assets/images/study/Graph.png" alt="programmers.co.kr" /></div></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Vertex</th>
      <th style="text-align: center">Edge</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">[[1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [5, 8], [6, 8], [7, 8]]</td>
    </tr>
  </tbody>
</table>

<h3 id="dfs">DFS</h3>
<ul>
  <li>노드를 설정한 방향대로 끝까지 간 뒤 가장 최근으로 backtacking을 진행하여 해당 방향 끝까지 보내며 전체 탐색을 하는 방법</li>
  <li>재귀 호출 방법과 스택을 사용한 방법이 있다.</li>
</ul>

<center>1→2→4→8→5→(8)→6→3→(6)→(8)→7→(8)→(4)→(2)→(1)</center>

<h5 id="배열">배열</h5>
<ul>
  <li>재귀</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="n">fun</span> <span class="nf">dfsSearch</span><span class="o">(</span><span class="nl">arr:</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">Array</span><span class="o">&lt;</span><span class="nc">Int</span><span class="o">&gt;&gt;,</span> <span class="nl">start:</span> <span class="nc">Int</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">visited</span> <span class="o">=</span> <span class="nc">Array</span><span class="o">(</span><span class="n">arr</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span> <span class="kc">false</span> <span class="o">}</span>
    <span class="n">fun</span> <span class="nf">recDfs</span><span class="o">(</span><span class="nl">index:</span> <span class="nc">Int</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="nf">print</span><span class="o">(</span><span class="s">"$index "</span><span class="o">)</span>

        <span class="n">arr</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">forEachIndexed</span> <span class="o">{</span><span class="n">index</span><span class="o">,</span> <span class="n">item</span> <span class="o">-&gt;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">index</span><span class="o">])</span> <span class="n">recDfs</span><span class="o">(</span><span class="n">index</span><span class="o">)</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nf">recDfs</span><span class="o">(</span><span class="n">start</span><span class="o">)</span>
<span class="o">}</span>
<span class="n">dfsSearch</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>1 2 4 8 5 6 3 7 
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>스택</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="n">fun</span> <span class="nf">dfsSearch</span><span class="o">(</span><span class="nl">arr:</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="nc">Array</span><span class="o">&lt;</span><span class="nc">Int</span><span class="o">&gt;&gt;,</span> <span class="nl">start:</span> <span class="nc">Int</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">visited</span> <span class="o">=</span> <span class="nc">Array</span><span class="o">(</span><span class="n">arr</span><span class="o">.</span><span class="na">size</span><span class="o">)</span> <span class="o">{</span> <span class="kc">false</span> <span class="o">}</span>
    <span class="n">val</span> <span class="n">stack</span> <span class="o">=</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Int</span><span class="o">&gt;()</span>
    <span class="n">fun</span> <span class="nf">stackDfs</span><span class="o">(</span><span class="nl">index:</span> <span class="nc">Int</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">index</span><span class="o">)</span>
        <span class="kt">var</span> <span class="nl">flag:</span> <span class="nc">Boolean</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="nf">print</span><span class="o">(</span><span class="s">"$index "</span><span class="o">)</span>
        <span class="kt">var</span> <span class="nl">value:</span><span class="nc">Int</span>

        <span class="nf">while</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span>
            <span class="n">run</span> <span class="n">loop</span><span class="err">@</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">value</span><span class="o">].</span><span class="na">forEachIndexed</span><span class="o">{</span> <span class="n">index</span><span class="o">,</span> <span class="n">item</span> <span class="o">-&gt;</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span><span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">index</span><span class="o">])</span> <span class="o">{</span>
                            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">index</span><span class="o">)</span>
                            <span class="n">print</span><span class="o">(</span><span class="s">"$index "</span><span class="o">)</span>
                            <span class="n">visited</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span>
                            <span class="k">return</span><span class="nd">@loop</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">flag</span><span class="o">)</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span>
        <span class="o">}</span>
        <span class="k">return</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nf">stackDfs</span><span class="o">(</span><span class="n">start</span><span class="o">)</span>
<span class="o">}</span>
<span class="n">dfsSearch</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>1 2 4 8 5 6 3 7 
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="리스트">리스트</h5>

<h2 id="bfs">BFS</h2>

<ul>
  <li>한 노드에 연결된 노드를 전체 탐색한 뒤 설정한 방향대로 차례로 진행하며 전체를 탐색 하는 방법</li>
  <li>큐를 사용한다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">1→(1)→2→3→(2)→4→5→(3)→6→7→(4)→8→(5)→(6)→(7)→(8)</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">start</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    
    <span class="kd">class</span> <span class="nx">Queue</span> <span class="p">{</span>
        <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">_arr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">}</span>
        <span class="nx">enqueue</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">_arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">dequeue</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_arr</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="nx">peek</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Queue</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">recBFS</span> <span class="o">=</span> <span class="p">(</span><span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> 
        <span class="nx">queue</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="nx">idx</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">flag</span><span class="p">;</span>
        <span class="nx">visited</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">idx</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">peek</span><span class="p">();</span>
        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span> <span class="nx">i</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">value</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">visited</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">queue</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                    <span class="nx">visited</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                    <span class="nx">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">queue</span><span class="p">.</span><span class="nx">dequeue</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">value</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">peek</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">recBFS</span><span class="p">(</span><span class="nx">start</span><span class="p">);</span> <span class="c1">// idx start 부터 시작</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>DFS, BFS의 컨셉을 이용해 문제를 해결해야 하는 것들이 있음을 인지하자.</p>
:ET