I"f3<h3 id="자료형-프로젝션">자료형 프로젝션</h3>
<p>선언 지점 변성(declaration-site variance)</p>
<ul>
  <li>클래스 자체에 가변성을 지정하는 방식으로 클래스에 in/out을 지정할 수 있다.</li>
  <li>선언하면서 지정하면 클래스의 공변성을 전체적으로 지정하는 것
    <ul>
      <li>클래스를 사용하는 장소에서는 따로 자료형을 지정해 줄 필요가 없음</li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="o">&lt;</span><span class="nx">Box</span> <span class="k">in</span> <span class="nx">T</span><span class="p">:</span> <span class="nx">Animal</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">var</span> <span class="nx">item</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>사용지점 변성(use-site variance)</p>
<ul>
  <li>매서드 매개변수에서 똗는 제네릭 클래스를 생성할 때와 같이 사용 위치에서 가변성을 지정하는 방식</li>
</ul>

<p>사용지점 변성의 예</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Box</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="kd">var</span> <span class="nx">item</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Box의 사용시점에서 box의 item을 얻느냐(get) 설정하느냐(set)에 따라 out/in 결정</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nx">fun</span> <span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="nx">printObj</span><span class="p">(</span><span class="nx">box</span><span class="p">:</span> <span class="nx">Box</span><span class="o">&lt;</span><span class="nx">out</span> <span class="nx">Animal</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="nx">obj</span><span class="p">:</span> <span class="nx">Animal</span> <span class="o">=</span> <span class="nx">box</span><span class="p">.</span><span class="nx">item</span> <span class="c1">// item의 값을 얻음(get)</span>
    <span class="c1">// box.item = Animal() // Error! 설정(set)하려고 할때는 in이 지정되어야 한다.</span>
    <span class="nx">println</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이러한 방법을 자료형 프로젝션이라고 하며, 지료형 프로젝션을 통해 자료의 안정성을 보장한다.</p>

<h3 id="스타-프로젝션">스타 프로젝션</h3>

<p>in/out을 정하지 않고 추후에 결정</p>
<ul>
  <li>어떤 자료형이라도 들어올 수 있으나 구체적으로 자료형이 결정되고 난 후에는 그 자료형과 하위 자료형의 요소만 담을 수 있도록 제한</li>
</ul>

<p>Foo&lt;out T: TUpper&gt;</p>
<ul>
  <li>Foo&lt;*&gt;는 Foo<out TUpper="">와 동일</out></li>
</ul>

<p>Foo<in T=""></in></p>
<ul>
  <li>Foo&lt;*&gt;는 Foo<in Nothing="">와 동일</in></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">InOutTesT</span><span class="o">&lt;</span><span class="k">in</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">out</span> <span class="nx">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">t</span><span class="p">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">u</span><span class="p">:</span> <span class="nx">U</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// val propT: T = t // Error! T는 in 위치기 떄문에 out위치에 사용 불가</span>
    <span class="nx">val</span> <span class="nx">propU</span><span class="p">:</span> <span class="nx">U</span> <span class="o">=</span> <span class="nx">u</span> <span class="c1">// U는 out위치로 사용 가능</span>

    <span class="c1">//fun func1(u: U) // Error! U는 out 위치기 때문에 in위치에 사용 불가</span>
    <span class="nx">fun</span> <span class="nx">func2</span><span class="p">(</span><span class="nx">t</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// T는 in 위치에 사용 가능</span>
        <span class="nx">print</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">fun</span> <span class="nx">starTestFunc</span><span class="p">(</span><span class="nx">v</span><span class="p">:</span> <span class="nx">InOutTest</span><span class="o">&lt;*</span><span class="p">,</span> <span class="o">*&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// v.func2(1) // Error: Nothing으로 인자를 처리함</span>
    <span class="nx">print</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">propU</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>예</th>
      <th>가변성</th>
      <th>제한</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>out 프로젝션</td>
      <td>Box<out Cat=""></out></td>
      <td>공변성</td>
      <td>형식 매개변수는 세터를 통해 값을 설정하는 것이 제한됨</td>
    </tr>
    <tr>
      <td>in 프로젝션</td>
      <td>Box<in Cat=""></in></td>
      <td>반공변성</td>
      <td>형식 매개변수는 게터를 통해 값을 읽거나 반환 가능</td>
    </tr>
    <tr>
      <td>스타 프로젝션</td>
      <td>Box&lt;*&gt;</td>
      <td>모든 인스턴스는 하위타입이 될 수 있음</td>
      <td>in과 out은 사용 방법에 따라 결정됨</td>
    </tr>
  </tbody>
</table>

<h3 id="reified-자료형">reified 자료형</h3>

<p>reified 자료형이 필요한 이유</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">fun</span><span class="o">&lt;</span> <span class="nx">T</span><span class="o">&gt;</span> <span class="nx">myGenericFun</span><span class="p">(</span><span class="nx">c</span><span class="p">:</span> <span class="nx">Class</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>T 자료형은 실행 시간에 삭제</li>
  <li>컴파일 시간에는 접근 가능하나 함수 내부에서 사용하려면 위의 코드에서 함수의 매개변수를 넣어 c: Class<T> 처럼 지정해야만 실행 시간에 사라지지 않고 접근 가능하다.</T></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">inline</span> <span class="nx">fun</span> <span class="o">&lt;</span><span class="nx">reified</span> <span class="nx">T</span><span class="o">&gt;</span> <span class="nx">myGenericFun</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>reified로 형식 매개변수 T를 지정하면 실행 시간에 접근 가능</li>
  <li>reified 자료형은 inline 함수에서만 사용할 수 있다.
    <ul>
      <li>컴파일러가 복사해 넣을 때 실제 자료형을 알 수 있기 때문에 실행 시간에도 사용할 수 있게 됨</li>
    </ul>
  </li>
</ul>

<p>Class<T></T></p>
<ul>
  <li>.class 형태로 반환받는 객체</li>
  <li>Class라는 클래스는 원본 클래스에 대한 많은 메타 데이터를 가진다
    <ul>
      <li>패키지 이름이나 메서드, 필드, 구현된 인터펭스, 각종 검사 변수 등</li>
    </ul>
  </li>
</ul>

<p>Object::class</p>
<ul>
  <li>코틀린의 표현 방법으로 KClass를 나타낸다</li>
</ul>

<p>자바의 클래스를 가져오려면 .java를 사용해야 한다</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Object::class // KClass
Object::class.java // Class
</pre></td></tr></tbody></table></code></pre></div></div>

<p>reified를 이용한 결정됮 않은 제네릭 자료형의 처리</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="n">fun</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">result</span> <span class="o">=</span> <span class="n">getType</span><span class="o">&lt;</span><span class="nc">Float</span><span class="o">&gt;(</span><span class="mi">10</span><span class="o">)</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"result = $result"</span><span class="o">)</span>
<span class="o">}</span>

<span class="n">inline</span> <span class="n">fun</span> <span class="o">&lt;</span><span class="n">reified</span> <span class="no">T</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">(</span><span class="nl">value:</span> <span class="nc">Int</span><span class="o">):</span> <span class="no">T</span> <span class="o">{</span>
    <span class="n">println</span><span class="o">(</span><span class="nl">T:</span><span class="o">:</span><span class="kd">class</span><span class="err">)</span> <span class="err">//</span> <span class="nc">실행</span> <span class="n">시간에</span> <span class="n">삭제되지</span> <span class="n">않고</span> <span class="n">사용</span> <span class="n">가능</span>
    <span class="n">println</span><span class="o">(</span><span class="nl">T:</span><span class="o">:</span><span class="kd">class</span><span class="err">.</span><span class="nc">java</span><span class="o">)</span>

    <span class="k">return</span> <span class="nf">when</span> <span class="o">(</span><span class="nl">T:</span><span class="o">:</span><span class="kd">class</span><span class="err">)</span> <span class="err">{</span> <span class="err">//</span> <span class="nc">받아들인</span> <span class="n">제네릭</span> <span class="n">자료형에</span> <span class="n">따라</span> <span class="n">반환</span>
        <span class="nl">Float:</span><span class="o">:</span><span class="kd">class</span> <span class="err">=&gt;</span> <span class="nc">value</span><span class="o">.</span><span class="na">toFloat</span><span class="o">()</span> <span class="n">as</span> <span class="no">T</span>
        <span class="nl">Int:</span><span class="o">:</span><span class="kd">class</span> <span class="err">-&gt;</span> <span class="nc">value</span> <span class="n">as</span> <span class="no">T</span> 
        <span class="cm">/*
        as는 보통 임의로 캐스팅 하기 위해 사용.
        여기서는 T형식으로 캐스팅 하는데는
        '안전하지 않은' 캐스팅이로도 불리고
        '안전한' 캐스팅을 하려면 as? 와 같이 사용한다
        as?는 캐스팅 불가 시 null을 반환한다.
        */</span>
        <span class="k">else</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="s">"${T::class} is not supported!"</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET