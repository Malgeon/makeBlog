I"Џ<h3 id="delegation">Delegation</h3>

<p>코틀린에서는 두 가지의 Delegation을 소개한다.</p>

<p><a href="https://kotlinlang.org/docs/reference/delegated-properties.html">Property Delegation</a>과 <a href="https://kotlinlang.org/docs/reference/delegation.html">Implementation by Delegation</a>.</p>

<p>이 둘은 각기 다른 기능을 가지고 있는데, 2개의 포스트로 각각의 기능을 이해해보려 한다.</p>

<p><a href="http://blog.naver.com/PostView.nhn?blogId=yuyyulee&amp;logNo=221380919035&amp;categoryNo=22&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=1&amp;postListTopCurrentPage=1&amp;from=search&amp;userTopListOpen=true&amp;userTopListCount=5&amp;userTopListManageOpen=false&amp;userTopListCurrentPage=1">참고자료 2</a></p>

<h3 id="property-delegation">Property Delegation</h3>

<p>프로퍼티 위임(Property Delegation)은 프로퍼티에 대한 getter/setter를 위임하여 위임받은 객체로 하여금 값을 읽고 쓸 때 어떠한 중간 동작을 수행하는 기능이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;delegate&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 이름과 나이 그리고 연봉을 저장하는 프로그램에서 위임을 적용하는 과정을 보여주려고 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">_age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">_salary</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">age</span> <span class="p">=</span> <span class="n">_age</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"age get: $field"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">field</span>
        <span class="p">}</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"age set: $value"</span><span class="p">)</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
        <span class="p">}</span>
    <span class="kd">var</span> <span class="py">salary</span> <span class="p">=</span> <span class="n">_salary</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"salary get: $field"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">field</span>
        <span class="p">}</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"salary set: $value"</span><span class="p">)</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"K"</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">age</span> <span class="p">=</span> <span class="mi">21</span>
    <span class="n">p</span><span class="p">.</span><span class="n">salary</span> <span class="p">=</span> <span class="mi">2100</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"${p.name} - age: ${p.age}, salary: ${p.salary}"</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>age set: 21
salary set: 2100
age get: 21
salary get: 2100
K - age: 21, salary: 2100 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>간단한 프로그램임에도 코드가 많다. 여기서 코드를 줄이기 위해 중복되는 동작인 get과 set을 분리하여 호출하도록 만들었다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Delegator</span><span class="p">(</span><span class="kd">val</span> <span class="py">fname</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span><span class="mi">0</span>
    <span class="k">fun</span> <span class="nf">getMethod</span><span class="p">():</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"$fname get: $value"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>
    <span class="k">fun</span> <span class="nf">setMethod</span><span class="p">(</span><span class="n">newValue</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"$fname set: $newValue"</span><span class="p">)</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">newValue</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">ageDelegator</span> <span class="p">=</span> <span class="nc">Delegator</span><span class="p">(</span><span class="s">"age"</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">salaryDelegator</span> <span class="p">=</span> <span class="nc">Delegator</span><span class="p">(</span><span class="s">"salary"</span><span class="p">)</span>

    <span class="kd">var</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">ageDelegator</span><span class="p">.</span><span class="nf">getMethod</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">=</span> <span class="n">ageDelegator</span><span class="p">.</span><span class="nf">setMethod</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">salary</span><span class="p">:</span> <span class="nc">Int</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">salaryDelegator</span><span class="p">.</span><span class="nf">getMethod</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">=</span> <span class="n">salaryDelegator</span><span class="p">.</span><span class="nf">setMethod</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"K"</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">age</span> <span class="p">=</span> <span class="mi">21</span>
    <span class="n">p</span><span class="p">.</span><span class="n">salary</span> <span class="p">=</span> <span class="mi">2100</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"${p.name} - age: ${p.age}, salary: ${p.salary}"</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>age set: 21
salary set: 2100
age get: 21
salary get: 2100
K - age: 21, salary: 2100 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기에 더하여 코틀린은 by를 지원하여 프로퍼티의 get과 set을 이어주도록 만들어준다.
실제 Property Delegation에서 제공하는 Delegator가 아래와 같이 만들어져 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">salary</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span> <span class="k">by</span> <span class="nc">Delegator</span><span class="p">(</span><span class="n">age</span>
    <span class="kd">var</span> <span class="py">salary</span><span class="p">:</span> <span class="nc">Int</span> <span class="k">by</span> <span class="nc">Delegator</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Delegator</span><span class="p">(</span><span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">getValue</span><span class="p">(</span><span class="k">this</span><span class="nc">Ref</span><span class="p">:</span> <span class="nc">Person</span><span class="p">,</span> <span class="n">property</span><span class="p">:</span> <span class="nc">KProperty</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;):</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"${property.name} get: $value"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>

    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">setValue</span><span class="p">(</span><span class="k">this</span><span class="nc">Ref</span><span class="p">:</span> <span class="nc">Person</span><span class="p">,</span> <span class="n">property</span><span class="p">:</span> <span class="nc">KProperty</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"${property.name} set: $newValue"</span><span class="p">)</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">newValue</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"K"</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">age</span> <span class="p">=</span> <span class="mi">21</span>
    <span class="n">p</span><span class="p">.</span><span class="n">salary</span> <span class="p">=</span> <span class="mi">2100</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"${p.name} - age: ${p.age}, salary: ${p.salary} "</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>age set: 21
salary set: 2100
age get: 21
salary get: 2100
K - age: 21, salary: 2100 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기서 끝나지 않는다! 
해당</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="k">fun</span> <span class="nc">Person</span><span class="p">.</span><span class="nf">makeDelegator</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">=</span> <span class="nc">Delegator</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">salary</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">thisName</span> <span class="p">=</span> <span class="s">"Person 객체"</span>

    <span class="kd">var</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span> <span class="k">by</span> <span class="nf">makeDelegator</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
    <span class="kd">var</span> <span class="py">salary</span><span class="p">:</span> <span class="nc">Int</span> <span class="k">by</span> <span class="nf">makeDelegator</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Delegator</span><span class="p">(</span><span class="kd">var</span> <span class="py">person</span><span class="p">:</span> <span class="nc">Person</span><span class="p">,</span> <span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>

    <span class="nf">init</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"Delegator 실행!! 여긴 ${person.thisName}"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">getValue</span><span class="p">(</span><span class="k">this</span><span class="nc">Ref</span><span class="p">:</span> <span class="nc">Person</span><span class="p">,</span> <span class="n">property</span><span class="p">:</span> <span class="nc">KProperty</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;):</span> <span class="nc">Int</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"${property.name} get: $value"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>

    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">setValue</span><span class="p">(</span><span class="k">this</span><span class="nc">Ref</span><span class="p">:</span> <span class="nc">Person</span><span class="p">,</span> <span class="n">property</span><span class="p">:</span> <span class="nc">KProperty</span><span class="p">&lt;</span><span class="err">*</span><span class="p">&gt;,</span> <span class="n">newValue</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"${property.name} set: $newValue"</span><span class="p">)</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">newValue</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">p</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"K"</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">age</span> <span class="p">=</span> <span class="mi">21</span>
    <span class="n">p</span><span class="p">.</span><span class="n">salary</span> <span class="p">=</span> <span class="mi">2100</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"${p.name} - age: ${p.age}, salary: ${p.salary} "</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>Delegator 실행!! 여긴 Person 객체
Delegator 실행!! 여긴 Person 객체
age set: 21
salary set: 2100
age get: 21
salary get: 2100
K - age: 21, salary: 2100 
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그렇다면 여기서</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nc">Base</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Base</span> <span class="k">by</span> <span class="n">b</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이 부분을 디컴파일 해보면 다음과 같다. (그 윗부분은 알고있는 상속 인터페이스)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">implements</span> <span class="nc">Base</span> <span class="o">{</span>
   <span class="c1">// $FF: synthetic field</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Base</span> <span class="err">$</span><span class="n">$delegate_0</span><span class="o">;</span>

   <span class="kd">public</span> <span class="nf">Derived</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="nc">Base</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="s">"b"</span><span class="o">);</span>
      <span class="kd">super</span><span class="o">();</span>
      <span class="k">this</span><span class="o">.</span><span class="err">$</span><span class="n">$delegate_0</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printX</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="err">$</span><span class="n">$delegate_0</span><span class="o">.</span><span class="na">printX</span><span class="o">();</span>
   <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>$$delegate_0가 Base 타입의 본래 인스턴스를 참조할 수 있도록 생성되며, printX()도 정적 메소드로 생성되어 $$delegate_0의 printX()를 호출할 수 있도록 생성된다.</p>

<p>그렇기 때문에, Derived를 사용할 때 Base에 대한 명시적 참조를 생략하고, printX() 메소드를 호출하는 것이 가능하다.</p>

<p>그렇다면 오버라이딩 한 멤버를 위임할 경우는 어떻게 될까?</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">interface</span> <span class="nc">Base</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">printMessage</span><span class="p">()</span>
    <span class="k">fun</span> <span class="nf">printMessageLine</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">BaseImpl</span><span class="p">(</span><span class="kd">val</span> <span class="py">x</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Base</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">printMessage</span><span class="p">()</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">printMessageLine</span><span class="p">()</span> <span class="p">{</span> <span class="nf">println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nc">Base</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Base</span> <span class="k">by</span> <span class="nf">b</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">printMessage</span><span class="p">()</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"abc"</span><span class="p">)</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">b</span> <span class="p">=</span> <span class="nc">BaseImpl</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="nf">printMessage</span><span class="p">()</span>
    <span class="nc">Derived</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="nf">printMessageLine</span><span class="p">()</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>abc10
</pre></td></tr></tbody></table></code></pre></div></div>

<p>다시 디컴파일을 해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">implements</span> <span class="nc">Base</span> <span class="o">{</span>
   <span class="c1">// $FF: synthetic field</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Base</span> <span class="err">$</span><span class="n">$delegate_0</span><span class="o">;</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMessage</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">String</span> <span class="n">var1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
      <span class="kt">boolean</span> <span class="n">var2</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nf">Derived</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="nc">Base</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="s">"b"</span><span class="o">);</span>
      <span class="kd">super</span><span class="o">();</span>
      <span class="k">this</span><span class="o">.</span><span class="err">$</span><span class="n">$delegate_0</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMessageLine</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="err">$</span><span class="n">$delegate_0</span><span class="o">.</span><span class="na">printMessageLine</span><span class="o">();</span>
   <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>종합적으로 .. 상속과 동일하다!?</p>

<p>base를 impl한 b와 base를 impl한 derived는 상속 관계가 된다.</p>

<p>사실 기본적으로 코틀린 클래스는 JVM의 final속성을 가지고 있기 때문에, 상속을 하려면 open 키워드를 사용해야 한다. 그런데 위임을 사용한다면 레퍼런스에서 소개한대로 상속에 대안이 될수가 있다.</p>

<p><code class="language-plaintext highlighter-rouge">The Delegation pattern has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code</code></p>

<p>이번에 다른 예제를 살펴보자.</p>

<p>CoffeeMaker 프로그램이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
</pre></td><td class="rouge-code"><pre><span class="kd">interface</span> <span class="nc">Heater</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">on</span><span class="p">()</span>
    <span class="k">fun</span> <span class="nf">off</span><span class="p">()</span>
    <span class="k">fun</span> <span class="nf">isHot</span><span class="p">()</span> <span class="p">:</span> <span class="nc">Boolean</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">ElectricHeater</span><span class="p">(</span><span class="kd">var</span> <span class="py">heating</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Heater</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">on</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"~ ~ ~ heating ~ ~ ~"</span><span class="p">)</span>
        <span class="n">heating</span> <span class="p">=</span> <span class="k">true</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">off</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">heating</span> <span class="p">=</span> <span class="k">false</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">isHot</span><span class="p">()</span> <span class="p">:</span> <span class="nc">Boolean</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">heating</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">interface</span> <span class="nc">Pump</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">pump</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Thermosiphon</span><span class="p">(</span><span class="n">heater</span><span class="p">:</span> <span class="nc">Heater</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Pump</span><span class="p">,</span> <span class="nc">Heater</span> <span class="k">by</span> <span class="nf">heater</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">pump</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nf">isHot</span><span class="p">())</span> <span class="p">{</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">"=&gt; =&gt; pumping =&gt; =&gt;"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">interface</span> <span class="nc">CoffeeModule</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">getThermosiphon</span><span class="p">()</span> <span class="p">:</span> <span class="nc">Thermosiphon</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MyDripCoffeeModule</span> <span class="p">:</span> <span class="nc">CoffeeModule</span> <span class="p">{</span>
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">electricHeater</span><span class="p">:</span> <span class="nc">ElectricHeater</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span>
            <span class="nc">ElectricHeater</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">_thermosiphon</span> <span class="p">:</span> <span class="nc">Thermosiphon</span> <span class="k">by</span> <span class="nf">lazy</span> <span class="p">{</span>
        <span class="nc">Thermosiphon</span><span class="p">(</span><span class="n">electricHeater</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getThermosiphon</span><span class="p">()</span> <span class="p">:</span> <span class="nc">Thermosiphon</span> <span class="p">=</span> <span class="n">_thermosiphon</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">CoffeeMaker</span><span class="p">(</span><span class="kd">val</span> <span class="py">coffeeModule</span><span class="p">:</span> <span class="nc">CoffeeModule</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">brew</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">coffeeModule</span><span class="p">.</span><span class="nf">getThermosiphon</span><span class="p">().</span><span class="nf">run</span> <span class="p">{</span>
            <span class="nf">on</span><span class="p">()</span> <span class="c1">// heater.on 이 아니다!</span>
            <span class="nf">pump</span><span class="p">()</span>
            <span class="nf">println</span><span class="p">(</span><span class="s">" [_]P coffee! [_]P "</span><span class="p">)</span>
            <span class="nf">off</span><span class="p">()</span> <span class="c1">// heater.off 가 아니다!</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">coffeeMaker</span> <span class="p">=</span> <span class="nc">CoffeeMaker</span><span class="p">(</span><span class="nc">MyDripCoffeeModule</span><span class="p">())</span>
    <span class="n">coffeeMaker</span><span class="p">.</span><span class="nf">brew</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><a href="https://medium.com/til-kotlin-ko/kotlin%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9C%84%EC%9E%84%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EA%B0%80-c14dcbbb08ad">위 글은 이 포스트에서 참고하였습니다.</a></p>
:ET